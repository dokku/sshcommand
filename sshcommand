#!/bin/bash
set -e

shopt -s nocasematch #For case insensitive string matching, for the first parameter

OSRELEASE=/etc/os-release

f_print_os_name() {
  sed -n 's#^NAME="\(.*\)"#\1#p' $OSRELEASE
  return 0
}

f_adduser() {
  local l_user l_platform

  l_user=$1
  l_platform="$(f_print_os_name)"
  case $l_platform in
    Debian*|Ubuntu|Raspbian*)
      adduser --disabled-password --gecos "" "$l_user"
      ;;
    *)
      useradd -m -s /bin/bash "$l_user"
      groupadd "$l_user"
      usermod -L -aG "$l_user" "$l_user"
      ;;

  esac
}

case "$1" in
  create) # sshcommand create <user> <command>
    if [[ $# -ne 3 ]]; then
      echo "Usage : sshcommand create user command"
      exit -1
    fi
    USER="$2"; COMMAND="$3"

    if id -u "$USER" >/dev/null 2>&1; then
      echo "User '$USER' already exists"
    else
      f_adduser "$USER"
    fi

    USERHOME=$(sh -c "echo ~$USER")
    mkdir -p "$USERHOME/.ssh"
    touch "$USERHOME/.ssh/authorized_keys"
    echo "$COMMAND" > "$USERHOME/.sshcommand"
    chown -R "$USER" "$USERHOME"
    ;;

  acl-add-quiet) # sshcommand acl-add <user> <identifier>
    if [[ $# -ne 3 ]]; then
      echo "Usage : sshcommand acl-add user identifier"
      exit -1
    fi
    USER="$2"; NAME="$3"

    getent passwd "$USER" > /dev/null || false
    USERHOME=$(sh -c "echo ~$USER")

    NEW_KEY=$(grep "NAME=\\\\\"$NAME"\\\\\" "$USERHOME/.ssh/authorized_keys" || true)
    if [ ! -z "$NEW_KEY" ]; then
      echo "Duplicate SSH Key name" >&2
      exit -1
    fi

    KEY_FILE=$(mktemp)
    KEY=$(tee "$KEY_FILE")
    delete_key_file() {
      rm -f "$KEY_FILE"
    }
    trap delete_key_file INT EXIT
    FINGERPRINT=$(ssh-keygen -lf "$KEY_FILE" | awk '{print $2}')

    if [[ ! "$FINGERPRINT" =~ :.* ]]; then
      echo "Invalid ssh public key"
      exit -1
    fi

    KEY_PREFIX="command=\"FINGERPRINT=$FINGERPRINT NAME=\\\"$NAME\\\" \`cat $USERHOME/.sshcommand\` \$SSH_ORIGINAL_COMMAND\",no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding"
    echo "$KEY_PREFIX $KEY" >> "$USERHOME/.ssh/authorized_keys"
    echo "$FINGERPRINT"
    ;;

  acl-add) # sshcommand acl-add <user> <identifier>
    if [[ $# -ne 3 ]]; then
      echo "Usage : sshcommand acl-add user identifier"
      exit -1
    fi
    USER="$2"; NAME="$3"
    KEY=$(cat)
    FINGERPRINT=$(ssh-keygen -lf /dev/stdin <<< $(echo $KEY) | awk '{print $2}')
    KEY_PREFIX="command=\"FINGERPRINT=$FINGERPRINT NAME=$NAME /usr/local/sbin/log-session \`cat $HOME_DIR/$USER/.sshcommand\` \$SSH_ORIGINAL_COMMAND\",no-agent-forwarding,no-user-rc,no-X11-forwarding,no-port-forwarding"
    echo "$KEY_PREFIX $KEY" >> "$HOME_DIR/$USER/.ssh/authorized_keys"
    echo $FINGERPRINT
    ;;

  acl-remove) # sshcommand acl-remove <user> <identifier>
    if [[ $# -ne 3 ]]; then
      echo "Usage : sshcommand acl-remove user identifier"
      exit -1
    fi
    USER="$2"; NAME="$3"

    getent passwd "$USER" > /dev/null || false
    USERHOME=$(sh -c "echo ~$USER")

    sed --in-place "/ NAME=\\\\\"$NAME\\\\\" /d" "$USERHOME/.ssh/authorized_keys"
    ;;

  help|*) # sshcommand help
    echo "Usage : sshcommand create user command"
    echo "        sshcommand acl-add user identifier"
    echo "        sshcommand acl-remove user identifier"
    echo "        sshcommand help # shows this usage message"
    ;;

esac
